import React, { useState, useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useUserPreferences } from '../hooks/useUserPreferences';
import { User, UserStats, UserAchievement, UserDraft, UserBookmark } from '../types';
import { api } from '../hooks/useBlogData';
import { 
    HeartIcon, EyeIcon, CommentIcon, PlusIcon, SpinnerIcon,
    EditIcon, BookmarkIcon, ChartIcon, AchievementIcon, SettingsIcon,
    TwitterIcon, GitHubIcon, LinkedInIcon, GlobeIcon, CheckCircleIcon 
} from '../components/Icons';
import { AuthorAvatar } from '../components/AuthorAvatar';

// Helper Components
const StatCard: React.FC<{ title: string; value: number | string; icon: React.ReactNode }> = ({ title, value, icon }) => (
    <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-sm">
        <div className="flex items-center space-x-3">
            <div className="p-3 bg-blue-100 dark:bg-blue-900 rounded-full">
                {icon}
            </div>
            <div>
                <p className="text-sm text-slate-600 dark:text-slate-400">{title}</p>
                <p className="text-2xl font-bold text-slate-900 dark:text-white">{value}</p>
            </div>
        </div>
    </div>
);

const AchievementCard: React.FC<{ achievement: UserAchievement }> = ({ achievement }) => (
    <div className="bg-white dark:bg-slate-800 rounded-lg p-4 shadow-sm">
        <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-full ${achievement.unlockedAt ? 'bg-green-100 dark:bg-green-900' : 'bg-slate-100 dark:bg-slate-700'}`}>
                <AchievementIcon className="w-6 h-6" />
            </div>
            <div>
                <h3 className="font-semibold text-slate-900 dark:text-white">{achievement.title}</h3>
                <p className="text-sm text-slate-600 dark:text-slate-400">{achievement.description}</p>
                {achievement.unlockedAt && (
                    <p className="text-xs text-green-600 dark:text-green-400 mt-1">
                        Unlocked {new Date(achievement.unlockedAt).toLocaleDateString()}
                    </p>
                )}
            </div>
        </div>
    </div>
);

const DraftCard: React.FC<{ draft: UserDraft }> = ({ draft }) => (
    <div className="bg-white dark:bg-slate-800 rounded-lg p-4 shadow-sm">
        <div className="flex justify-between items-start">
            <div>
                <h3 className="font-semibold text-slate-900 dark:text-white">{draft.title}</h3>
                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                    Last edited {new Date(draft.lastEdited).toLocaleDateString()}
                </p>
                <div className="flex flex-wrap gap-2 mt-2">
                    {draft.categories.map((category, idx) => (
                        <span key={idx} className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full">
                            {category}
                        </span>
                    ))}
                </div>
            </div>
            <button className="p-2 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors">
                <EditIcon className="w-5 h-5 text-slate-600 dark:text-slate-400" />
            </button>
        </div>
    </div>
);

const ReadingChart: React.FC<{ data: { date: string; count: number }[] }> = ({ data }) => (
    <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-sm">
        <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">Reading Activity</h3>
        <div className="h-48 flex items-end space-x-1">
            {data.map((day, idx) => (
                <div
                    key={idx}
                    className="flex-1 bg-blue-500 dark:bg-blue-600 rounded-t hover:bg-blue-600 dark:hover:bg-blue-500 transition-colors"
                    style={{ height: `${(day.count / Math.max(...data.map(d => d.count))) * 100}%` }}
                    title={`${day.date}: ${day.count} articles`}
                />
            ))}
        </div>
    </div>
);

export const ProfilePage: React.FC = () => {
    const { user, loading: authLoading, updateUserProfile } = useAuth();
    const { preferences } = useUserPreferences(user);
    const { username } = useParams<{ username: string }>();
    const [activeTab, setActiveTab] = useState<'overview' | 'posts' | 'bookmarks' | 'achievements' | 'settings'>('overview');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const [isEditing, setIsEditing] = useState(false);
    const [editedUser, setEditedUser] = useState<User | null>(null);
    
    const isOwner = user?.name?.toLowerCase().replace(/\s+/g, '-') === username;

    useEffect(() => {
        const loadUserData = async () => {
            if (!username) {
                setLoading(false);
                return;
            }

            // Don't load if auth is still initializing
            if (authLoading) {
                return;
            }

            try {
                setLoading(true);
                setError('');

                // If we have a logged-in user and this is their profile
                if (user && user.name.toLowerCase().replace(/\s+/g, '-') === username.toLowerCase()) {
                    setEditedUser(user);
                    setLoading(false);
                    return;
                }

                // If this is another user's profile
                const userData = await api.getUserProfile(username);
                if (userData) {
                    setEditedUser(userData);
                } else {
                    setError('User not found');
                }
            } catch (error: any) {
                console.error('Failed to load user data:', error);
                setError(error.message || 'Failed to load user data');
            } finally {
                setLoading(false);
            }
        };

        loadUserData();
    }, [username, user, authLoading]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!user || !editedUser) return;

        try {
            setLoading(true);
            setError('');
            setSuccess('');

            // Update the profile
            await updateUserProfile(user.uid, {
                name: editedUser.name,
                bio: editedUser.bio,
                socialLinks: editedUser.socialLinks,
            });

            setSuccess('Profile updated successfully!');
            setTimeout(() => setSuccess(''), 3000);
        } catch (error: any) {
            setError(error.message || 'Failed to update profile');
            setTimeout(() => setError(''), 3000);
        } finally {
            setLoading(false);
            setIsEditing(false);
        }
    };

    // Show loading spinner while the auth state is being determined
    if (authLoading) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <SpinnerIcon className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
        );
    }

    // Show loading spinner while the profile data is being loaded
    if (loading && !editedUser) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <SpinnerIcon className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <div className="text-center">
                    <h2 className="text-2xl font-bold text-slate-900 dark:text-white mb-4">
                        {error === 'User not found' ? 'User not found' : 'Something went wrong'}
                    </h2>
                    <p className="text-slate-600 dark:text-slate-400 mb-6">
                        {error === 'User not found' 
                            ? "Sorry, we couldn't find the user you're looking for."
                            : "We're having trouble loading this profile."
                        }
                    </p>
                    <Link
                        to="/"
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                        Return Home
                    </Link>
                </div>
            </div>
        );
    }

    if (!editedUser) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <div className="text-center">
                    <h2 className="text-2xl font-bold text-slate-900 dark:text-white mb-4">
                        User not found
                    </h2>
                    <p className="text-slate-600 dark:text-slate-400 mb-6">
                        Sorry, we couldn't find the user you're looking for.
                    </p>
                    <Link
                        to="/"
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                        Return Home
                    </Link>
                </div>
            </div>
        );
    }

    return (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            {/* Profile Header */}
            <div className="bg-white dark:bg-slate-800 rounded-xl p-8 shadow-sm mb-8">
                <div className="flex flex-col md:flex-row items-start md:items-center space-y-4 md:space-y-0 md:space-x-6">
                    <AuthorAvatar 
                        name={editedUser.name} 
                        photoURL={editedUser.photoURL} 
                        className="w-24 h-24 text-3xl"
                    />
                    <div className="flex-grow">
                        <div className="flex items-center space-x-4">
                            <h1 className="text-3xl font-bold text-slate-900 dark:text-white">
                                {editedUser.name}
                            </h1>
                            {editedUser.role === 'admin' && (
                                <span className="px-3 py-1 text-sm bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded-full">
                                    Admin
                                </span>
                            )}
                        </div>
                        <p className="text-slate-600 dark:text-slate-400 mt-2">
                            {editedUser.bio || 'No bio yet'}
                        </p>
                        <div className="flex items-center space-x-4 mt-4">
                            {editedUser.socialLinks?.twitter && (
                                <a href={editedUser.socialLinks.twitter} target="_blank" rel="noopener noreferrer" className="text-slate-600 dark:text-slate-400 hover:text-blue-500">
                                    <TwitterIcon className="w-5 h-5" />
                                </a>
                            )}
                            {editedUser.socialLinks?.github && (
                                <a href={editedUser.socialLinks.github} target="_blank" rel="noopener noreferrer" className="text-slate-600 dark:text-slate-400 hover:text-slate-900">
                                    <GitHubIcon className="w-5 h-5" />
                                </a>
                            )}
                            {editedUser.socialLinks?.linkedin && (
                                <a href={editedUser.socialLinks.linkedin} target="_blank" rel="noopener noreferrer" className="text-slate-600 dark:text-slate-400 hover:text-blue-700">
                                    <LinkedInIcon className="w-5 h-5" />
                                </a>
                            )}
                            {editedUser.socialLinks?.website && (
                                <a href={editedUser.socialLinks.website} target="_blank" rel="noopener noreferrer" className="text-slate-600 dark:text-slate-400 hover:text-green-600">
                                    <GlobeIcon className="w-5 h-5" />
                                </a>
                            )}
                        </div>
                    </div>
                    {isOwner && (
                        <button
                            onClick={() => setIsEditing(true)}
                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Edit Profile
                        </button>
                    )}
                </div>
            </div>

            {/* Navigation Tabs */}
            <div className="flex space-x-2 mb-8">
                <button
                    onClick={() => setActiveTab('overview')}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                        activeTab === 'overview'
                            ? 'bg-blue-600 text-white'
                            : 'bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                    }`}
                >
                    Overview
                </button>
                <button
                    onClick={() => setActiveTab('posts')}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                        activeTab === 'posts'
                            ? 'bg-blue-600 text-white'
                            : 'bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                    }`}
                >
                    My Posts
                </button>
                <button
                    onClick={() => setActiveTab('bookmarks')}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                        activeTab === 'bookmarks'
                            ? 'bg-blue-600 text-white'
                            : 'bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                    }`}
                >
                    Bookmarks
                </button>
                <button
                    onClick={() => setActiveTab('achievements')}
                    className={`px-4 py-2 rounded-lg transition-colors ${
                        activeTab === 'achievements'
                            ? 'bg-blue-600 text-white'
                            : 'bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                    }`}
                >
                    Achievements
                </button>
                {isOwner && (
                    <button
                        onClick={() => setActiveTab('settings')}
                        className={`px-4 py-2 rounded-lg transition-colors ${
                            activeTab === 'settings'
                                ? 'bg-blue-600 text-white'
                                : 'bg-white dark:bg-slate-800 text-slate-600 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                        }`}
                    >
                        Settings
                    </button>
                )}
            </div>

            {/* Tab Content */}
            <div className="space-y-8">
                {activeTab === 'overview' && (
                    <>
                        {/* Stats Grid */}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                            <StatCard
                                title="Total Posts"
                                value={editedUser?.stats?.totalPosts || 0}
                                icon={<PlusIcon className="w-6 h-6 text-blue-600 dark:text-blue-400" />}
                            />
                            <StatCard
                                title="Total Views"
                                value={editedUser?.stats?.totalViews || 0}
                                icon={<EyeIcon className="w-6 h-6 text-green-600 dark:text-green-400" />}
                            />
                            <StatCard
                                title="Total Upvotes"
                                value={editedUser?.stats?.totalUpvotes || 0}
                                icon={<HeartIcon className="w-6 h-6 text-red-600 dark:text-red-400" />}
                            />
                            <StatCard
                                title="Reading Streak"
                                value={`${editedUser?.stats?.readingStreak || 0} days`}
                                icon={<ChartIcon className="w-6 h-6 text-purple-600 dark:text-purple-400" />}
                            />
                        </div>

                        {/* Reading Activity Chart */}
                        {editedUser?.stats?.readingActivity && (
                            <ReadingChart data={editedUser.stats.readingActivity} />
                        )}

                        {/* Category Interests */}
                        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-sm">
                            <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                                Top Categories
                            </h3>
                            <div className="space-y-4">
                                {editedUser?.stats?.mostReadCategories?.map((cat, idx) => (
                                    <div key={idx} className="flex items-center">
                                        <div className="flex-grow">
                                            <div className="text-sm font-medium text-slate-900 dark:text-white">
                                                {cat.category}
                                            </div>
                                            <div className="h-2 bg-slate-100 dark:bg-slate-700 rounded-full mt-1">
                                                <div
                                                    className="h-2 bg-blue-600 rounded-full"
                                                    style={{
                                                        width: `${(cat.count / editedUser.stats.mostReadCategories[0].count) * 100}%`,
                                                    }}
                                                />
                                            </div>
                                        </div>
                                        <span className="ml-4 text-sm text-slate-600 dark:text-slate-400">
                                            {cat.count} posts
                                        </span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </>
                )}

                {activeTab === 'posts' && (
                    <div className="space-y-6">
                        <div className="flex justify-between items-center">
                            <h2 className="text-2xl font-bold text-slate-900 dark:text-white">My Posts</h2>
                            <Link
                                to="/create"
                                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                            >
                                <PlusIcon className="w-5 h-5" />
                                <span>New Post</span>
                            </Link>
                        </div>

                        {/* Posts Grid */}
                        <div className="grid gap-6 md:grid-cols-2">
                            {/* Drafts Section */}
                            {editedUser?.drafts && editedUser.drafts.length > 0 && (
                                <div className="md:col-span-2">
                                    <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                                        Drafts
                                    </h3>
                                    <div className="grid gap-4 md:grid-cols-2">
                                        {editedUser.drafts.map(draft => (
                                            <DraftCard key={draft.id} draft={draft} />
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {activeTab === 'bookmarks' && (
                    <div className="space-y-6">
                        <h2 className="text-2xl font-bold text-slate-900 dark:text-white">Saved Posts</h2>
                        <div className="grid gap-4 md:grid-cols-2">
                            {editedUser?.bookmarks && editedUser.bookmarks.length > 0 ? (
                                editedUser.bookmarks.map(bookmark => (
                                    <Link
                                        key={bookmark.postId}
                                        to={`/post/${bookmark.postId}`}
                                        className="block bg-white dark:bg-slate-800 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow"
                                    >
                                        <div className="flex justify-between items-start">
                                            <div>
                                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                                    Saved {new Date(bookmark.addedAt).toLocaleDateString()}
                                                </p>
                                                {bookmark.note && (
                                                    <p className="text-sm text-slate-700 dark:text-slate-300 mt-2 italic">
                                                        "{bookmark.note}"
                                                    </p>
                                                )}
                                                {bookmark.tags && bookmark.tags.length > 0 && (
                                                    <div className="flex flex-wrap gap-2 mt-2">
                                                        {bookmark.tags.map((tag, idx) => (
                                                            <span key={idx} className="text-xs bg-slate-100 dark:bg-slate-700 text-slate-800 dark:text-slate-200 px-2 py-1 rounded-full">
                                                                {tag}
                                                            </span>
                                                        ))}
                                                    </div>
                                                )}
                                            </div>
                                            <button className="p-2 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors">
                                                <BookmarkIcon className="w-5 h-5 text-slate-600 dark:text-slate-400" />
                                            </button>
                                        </div>
                                    </Link>
                                ))
                            ) : (
                                <div className="col-span-2 text-center p-8 text-slate-600 dark:text-slate-400">
                                    No saved posts yet
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {activeTab === 'achievements' && (
                    <div className="space-y-6">
                        <h2 className="text-2xl font-bold text-slate-900 dark:text-white">Achievements</h2>
                        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                            {editedUser?.achievements?.map(achievement => (
                                <AchievementCard key={achievement.id} achievement={achievement} />
                            ))}
                        </div>
                    </div>
                )}

                {activeTab === 'settings' && (
                    <div className="space-y-8">
                        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-sm">
                            <h2 className="text-xl font-bold text-slate-900 dark:text-white mb-6">
                                Profile Settings
                            </h2>
                            <form onSubmit={handleSubmit} className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                                        Display Name
                                    </label>
                                    <input
                                        type="text"
                                        value={editedUser?.name || ''}
                                        onChange={(e) => {
                                            setEditedUser(prev => ({
                                                ...prev!,
                                                name: e.target.value
                                            }));
                                        }}
                                        className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                                        Bio
                                    </label>
                                    <textarea
                                        value={editedUser?.bio || ''}
                                        onChange={(e) => {
                                            setEditedUser(prev => ({
                                                ...prev!,
                                                bio: e.target.value
                                            }));
                                        }}
                                        rows={4}
                                        className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg"
                                    />
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                                            Twitter URL
                                        </label>
                                        <input
                                            type="text"
                                            value={editedUser?.socialLinks?.twitter || ''}
                                            onChange={(e) => {
                                                setEditedUser(prev => ({
                                                    ...prev!,
                                                    socialLinks: {
                                                        ...prev!.socialLinks,
                                                        twitter: e.target.value
                                                    }
                                                }));
                                            }}
                                            className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                                            GitHub URL
                                        </label>
                                        <input
                                            type="text"
                                            value={editedUser?.socialLinks?.github || ''}
                                            onChange={(e) => {
                                                setEditedUser(prev => ({
                                                    ...prev!,
                                                    socialLinks: {
                                                        ...prev!.socialLinks,
                                                        github: e.target.value
                                                    }
                                                }));
                                            }}
                                            className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg"
                                        />
                                    </div>
                                </div>

                                {error && (
                                    <div className="bg-red-100 dark:bg-red-900/50 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4 rounded-md" role="alert">
                                        <p className="font-bold">Error</p>
                                        <p>{error}</p>
                                    </div>
                                )}

                                {success && (
                                    <div className="bg-green-100 dark:bg-green-900/50 border-l-4 border-green-500 text-green-700 dark:text-green-300 p-4 rounded-md" role="alert">
                                        <div className="flex">
                                            <div className="py-1">
                                                <CheckCircleIcon className="w-5 h-5 mr-2" />
                                            </div>
                                            <div>
                                                <p className="font-bold">Success</p>
                                                <p>{success}</p>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                <div className="pt-4">
                                    <button
                                        type="submit"
                                        className="w-full flex items-center justify-center space-x-2 px-6 py-3 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-slate-800 transition-colors disabled:bg-blue-400"
                                        disabled={loading}
                                    >
                                        {loading ? <SpinnerIcon className="w-5 h-5" /> : null}
                                        <span>{loading ? 'Saving...' : 'Save Changes'}</span>
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};
